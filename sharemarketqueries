//**************************** Share Market ************************* */ /

router.get("/get-share-market-data-instrument_key", async (req, res) => {
  try {
    const market_data = await Instruments.find(
      {},
      { instrument_key: 1, _id: 0 }
    );

    instrument_key_unique = market_data.map((data) => data.instrument_key);

    res.send(market_data);
  } catch (error) {
    console.log(error);
  }
});

router.post("/filter-by-exchange", async (req, res) => {
  try {
    const { query, page } = req.body;
    const limit = 40;

    if (!query || query.length < 3) {
      return res.status(400).json({
        error: "Please enter at least 3 characters in the search box.",
      });
    }

    const skip = (page - 1) * limit;
    const market_data = await Instruments.find(
      {
        $or: [
          { name: { $regex: new RegExp(query, "i") } },
          { exchange: { $regex: new RegExp(query, "i") } },
        ],
      },
      { exchange: 1, name: 1 }
    )
      .skip(skip)
      .limit(limit);

    res.send(market_data);
  } catch (error) {
    console.log(error);
    res.status(500).json({ error: "Internal server error" });
  }
});

// Add instrument key in the database
router.post("/add-instrument-keys", async (req, res) => {
  try {
    const { objectId } = req.body;

    // Check if the exchange already exists in the Instruments collection
    const instrument = await Instruments.findOne({ _id: objectId });
    if (!instrument) {
      // If the exchange doesn't exist, return an error
      return res.status(404).json({ error: "Exchange not found" });
    }

    // Convert instrument to JSON
    const instrumentJson = instrument.toJSON();

    // Extract instrument key
    const instrumentKey = instrumentJson.instrument_key;

    // Check if instrument key already exists
    const existingKey = await InstrumentKeys.findOne({
      instrument_key: instrumentKey,
    });
    if (existingKey) {
      // If the instrument key already exists, return an error
      return res.status(400).json({ error: "Instrument key already exists" });
    }

    // Create payload for new instrument key
    const payload = {
      instrument_key: instrumentKey,
    };

    // Create new instrument key instance
    const newInstrumentKey = new InstrumentKeys(payload);

    // Save the new instrument key
    const data = await newInstrumentKey.save();

    // Send success response
    res.status(200).json({ success: true, data });
  } catch (error) {
    // Handle errors
    console.error("Error:", error);
    res.status(500).json({ error: "Internal server error" });
  }
});
